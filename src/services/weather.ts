import { WeatherApiResponse } from "../types/WeatherApiResponse.js";

const API_KEY = process.env.WEATHER_API_KEY;
const CITY = 'Khmelnytskyi';

const EMOJI_WEATHER = 'üíß';
const EMOJI_TEMP = 'üå°Ô∏è';
const EMOJI_FEELS_LIKE = '‚òòÔ∏è';
const EMOJI_TEMP_MAX = 'üîº';
const EMOJI_TEMP_MIN = 'üîΩ';
const EMOJI_PRESSURE = '‚è≤Ô∏è';
const EMOJI_HUMIDITY = 'üí¶';
const EMOJI_WIND_SPEED = 'üí®';
const EMOJI_WIND_DIRECTION = 'üîÄ';
const EMOJI_SUNRISE = 'üåÑ';
const EMOJI_SUNSET = 'üåÖ';

if (!API_KEY) throw new Error('Weather API key was not found.');

const url = `https://api.openweathermap.org/data/2.5/weather?q=${CITY}&appid=${API_KEY}&units=metric&lang=ua`;

async function fetchWeatherInfo(): Promise<WeatherApiResponse> {
  try {
    const res = await fetch(url);
    if (!res.ok) {
      throw new Error(`Failed to fetch weather data: ${res.status} ${res.statusText}`);
    }
    const data = await res.json();
    return data;
  } catch (err) {
    if (err instanceof Error) {
      console.error('Error fetching weather data:', err.message);
      throw err;
    } else {
      console.error('Unknown error fetching weather data:', err);
      throw new Error('Unknown error occurred while fetching weather data.');
    }
  }
}

function getWindDirection(degree: number): string {
  switch (true) {
    case (degree >= 0 && degree < 22.5):
    case (degree >= 337.5 && degree <= 360):
      return '–ü—ñ–≤–Ω—ñ—á (N)';
    case (degree >= 22.5 && degree < 67.5):
      return '–ü—ñ–≤–Ω—ñ—á–Ω–∏–π-–°—Ö—ñ–¥ (NE)';
    case (degree >= 67.5 && degree < 112.5):
      return '–°—Ö—ñ–¥ (E)';
    case (degree >= 112.5 && degree < 157.5):
      return '–ü—ñ–≤–¥–µ–Ω–Ω–∏–π-–°—Ö—ñ–¥ (SE)';
    case (degree >= 157.5 && degree < 202.5):
      return '–ü—ñ–≤–¥–µ–Ω—å (S)';
    case (degree >= 202.5 && degree < 247.5):
      return '–ü—ñ–≤–¥–µ–Ω–Ω–∏–π-–ó–∞—Ö—ñ–¥ (SW)';
    case (degree >= 247.5 && degree < 292.5):
      return '–ó–∞—Ö—ñ–¥ (W)';
    case (degree >= 292.5 && degree < 337.5):
      return '–ü—ñ–≤–Ω—ñ—á–Ω–∏–π-–ó–∞—Ö—ñ–¥ (NW)';
    default:
      return '–ù–µ–≤—ñ–¥–æ–º–æ';
  }
}

function formatUnixTimeToHoursMinutes(unixTimestamp: number, timezoneOffsetHours: number = 3): string {
  const date = new Date((unixTimestamp + timezoneOffsetHours * 3600) * 1000);
  const hours = date.getUTCHours().toString().padStart(2, '0');
  const minutes = date.getUTCMinutes().toString().padStart(2, '0');
  return `${hours}:${minutes}`;
}

export function getWeatherEmoji(main: string): string {
  switch (main) {
    case 'Thunderstorm':
      return '‚õàÔ∏è –ì—Ä–æ–∑–∞';
    case 'Drizzle':
      return 'üå¶Ô∏è –ú—Ä—è–∫–∞';
    case 'Rain':
      return 'üåßÔ∏è –î–æ—â';
    case 'Snow':
      return '‚ùÑÔ∏è –°–Ω—ñ–≥';
    case 'Mist':
      return 'üå´Ô∏è –¢—É–º–∞–Ω';
    case 'Smoke':
      return 'üí® –î–∏–º';
    case 'Haze':
      return 'üå´Ô∏è –°–µ—Ä–ø–∞–Ω–æ–∫';
    case 'Dust':
      return 'üå™Ô∏è –ü–∏–ª';
    case 'Fog':
      return 'üå´Ô∏è –¢—É–º–∞–Ω';
    case 'Sand':
      return 'üèúÔ∏è –ü—ñ—â–∞–Ω–∞ –±—É—Ä—è';
    case 'Ash':
      return 'üåã –í—É–ª–∫–∞–Ω—ñ—á–Ω–∏–π –ø–æ–ø—ñ–ª';
    case 'Squall':
      return 'üí® –®–∫–≤–∞–ª';
    case 'Tornado':
      return 'üå™Ô∏è –¢–æ—Ä–Ω–∞–¥–æ';
    case 'Clear':
      return '‚òÄÔ∏è –Ø—Å–Ω–æ';
    case 'Clouds':
      return '‚òÅÔ∏è –•–º–∞—Ä–Ω–æ';
    default:
      return '‚ùî –ù–µ–≤—ñ–¥–æ–º–æ';
  }
}

export function getWeatherData() {
  return fetchWeatherInfo()
    .then(data => {
      const weather = data.weather[0]
      const main = data.main
      const wind = data.wind
      const sys = data.sys

      const icon = getWeatherEmoji(weather.main)
      const windDirection = getWindDirection(wind.deg ?? 0)
      const sunrise = formatUnixTimeToHoursMinutes(sys.sunrise)
      const sunset = formatUnixTimeToHoursMinutes(sys.sunset)

      return [
        { label: `${EMOJI_WEATHER} –ü–æ–≥–æ–¥–∞:`, value: [weather.main, weather.description, icon] },
        { label: `${EMOJI_TEMP} –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:`, value: `${main.temp} ¬∞C` },
        { label: `${EMOJI_FEELS_LIKE} –í—ñ–¥—á—É–≤–∞—î—Ç—å—Å—è —è–∫:`, value: `${main.feels_like} ¬∞C` },
        { label: `${EMOJI_TEMP_MAX} –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:`, value: `${main.temp_max} ¬∞C` },
        { label: `${EMOJI_TEMP_MIN} –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:`, value: `${main.temp_min} ¬∞C` },
        { label: `${EMOJI_PRESSURE} –¢–∏—Å–∫:`, value: `${main.pressure} –º–º` },
        { label: `${EMOJI_HUMIDITY} –í–æ–ª–æ–≥—ñ—Å—Ç—å:`, value: `${main.humidity} %` },
        { label: `${EMOJI_WIND_SPEED} –®–≤–∏–¥–∫—ñ—Å—Ç—å –≤—ñ—Ç—Ä—É:`, value: `${wind.speed} –º/—Å` },
        { label: `${EMOJI_WIND_DIRECTION} –ù–∞–ø—Ä—è–º–æ–∫ –≤—ñ—Ç—Ä—É:`, value: `${windDirection}` },
        { label: `${EMOJI_SUNRISE} –°–≤—ñ—Ç–∞–Ω–æ–∫:`, value: sunrise },
        { label: `${EMOJI_SUNSET} –ó–∞—Ö—ñ–¥ —Å–æ–Ω—Ü—è:`, value: sunset },
      ];
    })
}
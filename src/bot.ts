import { Bot, Context, session } from 'grammy';
import { Menu } from '@grammyjs/menu';
import dotenv from 'dotenv';

import pool from './db/client.js';
import { carMenu } from './menu/carMenu.js';
import { toolsMenu } from './menu/toolsMenu.js';
import { salaryMenu } from './menu/salaryMenu.js';

dotenv.config();

// === –¢–∏–ø –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –∑ —Å–µ—Å—ñ—î—é ===
interface SessionData {
  state: 'awaiting_kilometers' | null;
}

export type BotContext = Context & {
  session: SessionData;
};

const token = process.env.TELEGRAM_BOT_TOKEN;

if (!token) throw new Error('Telegram bot token was not found');

// === –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–æ—Ç–∞ ===
const bot = new Bot<BotContext>(token);

// === –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é ===
const mainMenu = new Menu<BotContext>('main-menu')
  .text('üöó Car', async (ctx) => {
    await ctx.reply('üöó –í–∏ –æ–±—Ä–∞–ª–∏ Car', { reply_markup: carMenu });
  })
  .text('üí∏ Salary', async (ctx) => {
    await ctx.reply('üí∏ –í–∏ –æ–±—Ä–∞–ª–∏ Salary', { reply_markup: salaryMenu });
  })
  .text('üõ†Ô∏è Tools', async (ctx) => {
    await ctx.reply('üõ†Ô∏è –í–∏ –æ–±—Ä–∞–ª–∏ Tools', { reply_markup: toolsMenu });
  });

// === –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—É ===
const contactKeyboard = {
  keyboard: [
    [
      {
        text: 'üìû –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º',
        request_contact: true,
      },
    ],
  ],
  resize_keyboard: true,
  one_time_keyboard: true,
};

// === –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è middleware ===
bot.use(
  session({
    initial: (): SessionData => ({
      state: null,
    }),
  })
);

// üëá –°–ø–æ—á–∞—Ç–∫—É —Ä–µ—î—Å—Ç—Ä—É—î–º–æ —É—Å—ñ –º–µ–Ω—é
bot.use(mainMenu);
bot.use(carMenu);
bot.use(salaryMenu);
bot.use(toolsMenu);

// === –ö–æ–º–∞–Ω–¥–∞ /start ===
bot.command('start', async (ctx) => {
  await ctx.reply('–ü—Ä–∏–≤—ñ—Ç! –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Å–≤–æ—ó–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º:', {
    reply_markup: contactKeyboard,
  });
});

// === –û–±—Ä–æ–±–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç—É ===
bot.on(':contact', async (ctx) => {
  const contact = ctx.message?.contact;
  const username = ctx.from?.username;

  if (!contact) {
    return ctx.reply('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç.', {
      reply_markup: { remove_keyboard: true },
    });
  }

  const { phone_number, first_name, last_name, user_id } = contact;

  try {
    // –ó–∞–ø–∏—Å—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É –ë–î
    const res = await pool.query(
      `
      INSERT INTO users 
        (telegram_user_id, username, first_name, last_name, phone_number) 
      VALUES 
        ($1, $2, $3, $4, $5) 
      ON CONFLICT (telegram_user_id) DO NOTHING
      RETURNING *`,
      [user_id, username, first_name, last_name || null, phone_number]
    );

    if (res.rows.length > 0) {
      const user = res.rows[0];
      console.log('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π:', user);

      await ctx.reply(`‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞!\n–ü—Ä–∏–≤—ñ—Ç, ${first_name}!\n–¢–≤—ñ–π –Ω–æ–º–µ—Ä: ${phone_number}\nID: ${user.id}`, {
        reply_markup: { remove_keyboard: true }, // üëà –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
      });
    } else {
      await ctx.reply(`üëã –ü—Ä–∏–≤—ñ—Ç –∑–Ω–æ–≤—É, ${first_name}!`, {
        reply_markup: { remove_keyboard: true }, // üëà –¢–∞–∫–æ–∂ –ø—Ä–∏—Ö–æ–≤—É—î–º–æ
      });
    }

    // –ü—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ—ó —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –ø–æ–∫–∞–∑—É—î–º–æ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
    await ctx.reply('–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –Ω–∏–∂—á–µ:', {
      reply_markup: mainMenu,
    });

  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–±–æ—Ç—ñ –∑ –ë–î:', error);
    await ctx.reply('‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.', {
      reply_markup: { remove_keyboard: true },
    });
  }
});

// === –û–±—Ä–æ–±–Ω–∏–∫ —Ç–µ–∫—Å—Ç—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –∫—ñ–ª–æ–º–µ—Ç—Ä–∞–∂) ===
bot.on(':text', async (ctx) => {
  if (ctx.session.state === 'awaiting_kilometers') {
    const text = ctx.message?.text?.trim();

    if (!ctx.from) {
      return ctx.reply('–ü–æ–º–∏–ª–∫–∞: –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.');
    }

    if (!text || text.trim() === '') {
      return ctx.reply('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è.');
    }

    let km: number;

    try {
      km = parseFloat(text.replace(',', '.'));

      if (isNaN(km)) {
        return ctx.reply('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–µ —á–∏—Å–ª–æ.');
      }

      // –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –ë–î –∑–∞ telegram_user_id
      const userRes = await pool.query(
        'SELECT id FROM users WHERE telegram_user_id = $1',
        [ctx.from.id]
      );

      if (userRes.rows.length === 0) {
        return ctx.reply('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É —Å–∏—Å—Ç–µ–º—ñ.');
      }

      const dbUserId = userRes.rows[0].id;

      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—ó–∑–¥–∫—É
      await pool.query(
        'INSERT INTO trips (user_id, kilometers) VALUES ($1, $2)',
        [dbUserId, km]
      );

      await ctx.reply(`‚úÖ –ö—ñ–ª–æ–º–µ—Ç—Ä–∞–∂ ${km} –∫–º —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ.`);
      ctx.session.state = null; // –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω

    } catch (e) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –ø–æ—ó–∑–¥–∫–∏:', e);
      await ctx.reply('‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ.');
    }
  }
});

export default bot;
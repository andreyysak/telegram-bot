import { Bot, Context, GrammyError, HttpError, session, SessionFlavor } from 'grammy';
import dotenv from 'dotenv';
import pool from './db/client.js';

import { tripModule } from './modules/car/trip.js';
import { tripHistoryModule } from './modules/car/tripHistory.js';
import { weatherModule } from './modules/weather/weather.js';
import { gasModule } from './modules/car/gas.js';
import { ipInfoModule } from './modules/network/ipinfo.js';
import { pingModule } from './modules/network/ping.js';
import { licensePlate } from './modules/apps/licensePlate.js';
import { statisticModule } from './modules/car/statistic.js';
import { exportModule } from './modules/car/export.js';

import { contactKeyboard } from './keyboard/shareContact.js';
import { APPS_MENU_TEXT, CAR_MENU_TEXT, mainMenuKeyboard, mainMenuKeyboardRestricted, NETWORK_MENU_TEXT, TODO_MENU_TEXT, WEATHER_MENU_TEXT } from './keyboard/mainMenu.js';
import { carMenuKeyboard } from './keyboard/carMenu.js';
import { BACK_TO_MAIN_TEXT } from './keyboard/backToMenu.js';
import { SessionData } from './types/SessionData.js';
import { carHistoryModule } from './modules/car/carHistory.js';
import { gasHistoryModule } from './modules/car/gasHistory.js';
import { maintenanceModule } from './modules/car/maintenanceModule.js';
import { maintenanceHistoryModule } from './modules/car/maintenanceHistory.js';
import { washModule } from './modules/car/washModule.js';
import { washHistoryModule } from './modules/car/washHistory.js';
import { networkMenuKeyboard } from './keyboard/networkMenu.js';
import { appsMenuKeyboard } from './keyboard/appsKeyboard.js';
import { todoKeyboard } from './keyboard/todoKeyboard.js';
import { addTodoModule } from './modules/todo/addTodo.js';
import { listTodoModule } from './modules/todo/listTodo.js';
import { completeTodoModule } from './modules/todo/completeTodo.js';
import { deleteTodoModule } from './modules/todo/deleteTodo.js';
import { editTodoModule } from './modules/todo/editTodo.js';

dotenv.config();

export type BotContext = Context & SessionFlavor<SessionData>;

const token = process.env.TELEGRAM_BOT_TOKEN;

if (!token) throw new Error('Telegram bot token was not found');

const bot = new Bot<BotContext>(token);

const allowedUserIds = process.env.ALLOWED_USER_IDS?.split(',').map(id => parseInt(id.trim(), 10)) || [];

// –°–µ—Å—ñ—è
bot.use(
  session({
    initial: (): SessionData => ({
      registered: false,
    }),
  })
);

// ‚Å°‚Å£‚Å£‚Å¢–Ü–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—ñ–≤‚Å°
bot.use(tripModule)
bot.use(gasModule)
bot.use(maintenanceModule)
bot.use(washModule)
bot.use(statisticModule)
bot.use(exportModule)
bot.use(carHistoryModule)
bot.use(tripHistoryModule)
bot.use(gasHistoryModule)
bot.use(maintenanceHistoryModule)
bot.use(washHistoryModule)

bot.use(weatherModule)
bot.use(addTodoModule)
bot.use(listTodoModule)
bot.use(completeTodoModule)
bot.use(deleteTodoModule)
bot.use(editTodoModule)

bot.use(ipInfoModule)
bot.use(pingModule)

bot.use(licensePlate)

// –ö–æ–º–∞–Ω–¥–∞ start
bot.command('start', async (ctx) => {
  await ctx.reply('–ü—Ä–∏–≤—ñ—Ç! –©–æ–± –ø–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É, –ø–æ–¥—ñ–ª–∏—Å—å —Å–≤–æ—ó–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º:', {
    reply_markup: contactKeyboard,
  });
});

// –û–±—Ä–æ–±–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç—É
bot.on(':contact', async (ctx) => {
  const contact = ctx.message?.contact;
  const username = ctx.from?.username;

  if (!contact) {
    return ctx.reply('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç.', {
      reply_markup: { remove_keyboard: true },
    });
  }

  const { phone_number, first_name, last_name, user_id } = contact;

  try {
    // –ó–∞–ø–∏—Å—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É –ë–î
    const res = await pool.query(
      `
      INSERT INTO users 
        (telegram_user_id, username, first_name, last_name, phone_number) 
      VALUES 
        ($1, $2, $3, $4, $5) 
      ON CONFLICT (telegram_user_id) DO NOTHING
      RETURNING *`,
      [user_id, username, first_name, last_name || null, phone_number]
    );

    if (res.rows.length > 0) {
      const user = res.rows[0];
      console.log('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π:', user);
      await ctx.reply('‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞!', {
        reply_markup: mainMenuKeyboard
      });
    } else {
      await ctx.reply(`üëã –ü—Ä–∏–≤—ñ—Ç, ${first_name}!`, {
        reply_markup: mainMenuKeyboard,
      });
    }

    // –ü–æ–∑–Ω–∞—á–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —è–∫ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ–≥–æ
    ctx.session.registered = true;

  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–±–æ—Ç—ñ –∑ –ë–î:', error);
    await ctx.reply('‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.', {
      reply_markup: { remove_keyboard: true },
    });
  }
});

// === Middleware –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–∞–≤ ===
bot.use(async (ctx, next) => {
  const userId = ctx.from?.id;

  if (!userId) return ctx.reply('‚ùå –ù–µ –º–æ–∂—É –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤–∞—à Telegram ID.');

  // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –≤ —Å–ø–∏—Å–∫—É –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö ‚Äî –æ–±–º–µ–∂—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª
  if (!allowedUserIds.includes(userId)) {
    ctx.session.restricted = true;
    return next(); // –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ –æ–±—Ä–æ–±–∫—É, –∞–ª–µ –ø–æ–∫–∞–∂–µ–º–æ –æ–±–º–µ–∂–µ–Ω–µ –º–µ–Ω—é
  }

  ctx.session.restricted = false;
  return next();
});

// === –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é (—Ç–µ–ø–µ—Ä –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é –ø—Ä–∞–≤) ===
bot.hears(CAR_MENU_TEXT, async (ctx) => {
  await ctx.reply('üöó –¢–∏ –æ–±—Ä–∞–≤ –ê–≤—Ç–æ', {
    reply_markup: carMenuKeyboard,
  });
});

bot.hears(BACK_TO_MAIN_TEXT, async (ctx) => {
  if (ctx.session.restricted) {
    return ctx.reply('‚¨ÖÔ∏è –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –Ω–∞–∑–∞–¥', {
      reply_markup: mainMenuKeyboardRestricted,
    });
  }

  await ctx.reply('‚¨ÖÔ∏è –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –Ω–∞–∑–∞–¥', {
    reply_markup: mainMenuKeyboard,
  });
});

// === –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –¥–ª—è –æ–±–º–µ–∂–µ–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ ===
bot.hears([WEATHER_MENU_TEXT, NETWORK_MENU_TEXT, APPS_MENU_TEXT, TODO_MENU_TEXT], async (ctx) => {
  const userId = ctx.from?.id;

  if (!userId) throw new Error('–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ userId.')

  if (allowedUserIds.includes(userId)) {
    if (ctx.match === WEATHER_MENU_TEXT) {
      return ctx.reply('‚õÖ –¢–∏ –æ–±—Ä–∞–≤ –ü–æ–≥–æ–¥—É');
    }
    if (ctx.match === NETWORK_MENU_TEXT) {
      return ctx.reply('üåê –¢–∏ –æ–±—Ä–∞–≤ –ú–µ—Ä–µ–∂—É', {
        reply_markup: networkMenuKeyboard
      });
    }
    if (ctx.match === APPS_MENU_TEXT) {
      return ctx.reply('ü§ñ –¢–∏ –æ–±—Ä–∞–≤ –î–æ–¥–∞—Ç–∫–∏', {
        reply_markup: appsMenuKeyboard
      });
    }
    if (ctx.match === TODO_MENU_TEXT) {
      return ctx.reply('‚úÖ –¢–∏ –æ–±—Ä–∞–≤ –°–ø–∏—Å–æ–∫ —Å–ø—Ä–∞–≤', {
        reply_markup: todoKeyboard
      });
    }
  } else {
    await ctx.reply('‚õîÔ∏è –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—å–æ–≥–æ –ø—É–Ω–∫—Ç—É –º–µ–Ω—é.', {
      reply_markup: mainMenuKeyboardRestricted,
    });
  }
});

// –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç—É –¥–ª—è –Ω–µ–∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
bot.on(':text').filter(
  (ctx): boolean => !ctx.session.registered,
  async (ctx) => {
    return ctx.reply('–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Å–≤–æ—ó–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º.', {
      reply_markup: contactKeyboard,
    });
  }
);

// –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
bot.catch((err) => {
  const ctx = err.ctx;
  console.error(`–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è ${ctx.update.update_id}:`);
  const e = err.error;
  if (e instanceof GrammyError) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –≤ –∑–∞–ø–∏—Ç—ñ:", e.description);
  } else if (e instanceof HttpError) {
    console.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≤ º—è–∑–∞—Ç–∏—Å—è –∑ Telegram:", e);
  } else {
    console.error("–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞:", e);
  }
});

export default bot
import { Bot, Context, GrammyError, HttpError, session, SessionFlavor } from 'grammy';
import dotenv from 'dotenv';
import pool from './db/client.js';

import { tripModule } from './modules/car/trip.js';
import { tripHistoryModule } from './modules/car/tripHistory.js';
import { weatherModule } from './modules/weather/weather.js';
import { gasModule } from './modules/car/gas.js';
import { ipInfoModule } from './modules/network/ipinfo.js';

import { contactKeyboard } from './keyboard/shareContact.js';
import { CAR_MENU_TEXT, mainMenuKeyboard, NETWORK_MENU_TEXT } from './keyboard/mainMenu.js';
import { carMenuKeyboard } from './keyboard/carMenu.js';
import { BACK_TO_MAIN_TEXT } from './keyboard/backToMenu.js';
import { SessionData } from './types/SessionData.js';
import { networkMenuKeyboard } from './keyboard/networkMenu.js';

dotenv.config();

export type BotContext = Context & SessionFlavor<SessionData>;

const token = process.env.TELEGRAM_BOT_TOKEN;

if (!token) throw new Error('Telegram bot token was not found');

const bot = new Bot<BotContext>(token);

// –°–µ—Å—ñ—è
bot.use(
  session({
    initial: (): SessionData => ({
      registered: false,
    }),
  })
);

// –Ü–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—ñ–≤
bot.use(tripModule)
bot.use(tripHistoryModule)
bot.use(weatherModule)
bot.use(gasModule)
bot.use(ipInfoModule)

// –ö–æ–º–∞–Ω–¥–∞ start
bot.command('start', async (ctx) => {
  await ctx.reply('–ü—Ä–∏–≤—ñ—Ç! –©–æ–± –ø–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É, –ø–æ–¥—ñ–ª–∏—Å—å —Å–≤–æ—ó–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º:', {
    reply_markup: contactKeyboard,
  });
});

// –û–±—Ä–æ–±–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç—É
bot.on(':contact', async (ctx) => {
  const contact = ctx.message?.contact;
  const username = ctx.from?.username;

  if (!contact) {
    return ctx.reply('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç.', {
      reply_markup: { remove_keyboard: true },
    });
  }

  const { phone_number, first_name, last_name, user_id } = contact;

  try {
    // –ó–∞–ø–∏—Å—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É –ë–î
    const res = await pool.query(
      `
      INSERT INTO users 
        (telegram_user_id, username, first_name, last_name, phone_number) 
      VALUES 
        ($1, $2, $3, $4, $5) 
      ON CONFLICT (telegram_user_id) DO NOTHING
      RETURNING *`,
      [user_id, username, first_name, last_name || null, phone_number]
    );

    if (res.rows.length > 0) {
      const user = res.rows[0];
      console.log('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π:', user);
      await ctx.reply('‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞!', {
        reply_markup: mainMenuKeyboard
      });
    } else {
      await ctx.reply(`üëã –ü—Ä–∏–≤—ñ—Ç, ${first_name}!`, {
        reply_markup: mainMenuKeyboard,
      });
    }

    // –ü–æ–∑–Ω–∞—á–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —è–∫ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ–≥–æ
    ctx.session.registered = true;

  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–±–æ—Ç—ñ –∑ –ë–î:', error);
    await ctx.reply('‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.', {
      reply_markup: { remove_keyboard: true },
    });
  }
});

// –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
bot.hears(BACK_TO_MAIN_TEXT, async (ctx) => {
  await ctx.reply('‚¨ÖÔ∏è –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –Ω–∞–∑–∞–¥', {
    reply_markup: mainMenuKeyboard,
  });
});

bot.hears(CAR_MENU_TEXT, async (ctx) => {
  await ctx.reply('üöó –¢–∏ –æ–±—Ä–∞–≤ –∞–≤—Ç–æ', {
    reply_markup: carMenuKeyboard,
  });
});

bot.hears(NETWORK_MENU_TEXT, async (ctx) => {
  await ctx.reply('üåê –¢–∏ –æ–±—Ä–∞–≤ –º–µ—Ä–µ–∂—É', {
    reply_markup: networkMenuKeyboard
  })
})

// –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç—É –¥–ª—è –Ω–µ–∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
bot.on(':text').filter(
  (ctx): boolean => !ctx.session.registered,
  async (ctx) => {
    return ctx.reply('–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Å–≤–æ—ó–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º.', {
      reply_markup: contactKeyboard,
    });
  }
);

// –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
bot.catch((err) => {
  const ctx = err.ctx;
  console.error(`–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è ${ctx.update.update_id}:`);
  const e = err.error;
  if (e instanceof GrammyError) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –≤ –∑–∞–ø–∏—Ç—ñ:", e.description);
  } else if (e instanceof HttpError) {
    console.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≤ º—è–∑–∞—Ç–∏—Å—è –∑ Telegram:", e);
  } else {
    console.error("–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞:", e);
  }
});

export default bot
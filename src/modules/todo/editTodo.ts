import { Composer } from "grammy";
import { BotContext } from "../../bot.js";
import { EDIT_TEXT, todoKeyboard } from "../../keyboard/todoKeyboard.js";
import pool from "../../db/client.js";

export const editTodoModule = new Composer<BotContext>()

editTodoModule.hears(EDIT_TEXT, async (ctx) => {
  await ctx.reply('üî¢ –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Å–ø—Ä–∞–≤–∏ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è:');

  ctx.session.todo = {
    state: 'edit_todo_index',
  };
});

editTodoModule.on(':text').filter(
  (ctx): boolean => ctx.session.todo?.state === 'edit_todo_index',
  async (ctx) => {
    const text = ctx.message?.text.trim();
    const userId = ctx.from?.id;

    if (!text) throw new Error('‚ùå –ù–µ –æ—Ç—Ä–∏–º–∞–Ω–æ –∂–æ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö.')

    if (!userId) {
      return ctx.reply('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.');
    }

    const index = parseInt(text, 10);

    if (isNaN(index)) {
      return ctx.reply('‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä.', {
        reply_markup: todoKeyboard,
      });
    }

    try {
      // –û—Ç—Ä–∏–º—É—î–º–æ user_id –∑ –ë–î
      const userRes = await pool.query(
        'SELECT id FROM users WHERE telegram_user_id = $1',
        [userId]
      );

      if (userRes.rows.length === 0) {
        return ctx.reply('‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É —Å–∏—Å—Ç–µ–º—ñ.');
      }

      const dbUserId = userRes.rows[0].id;

      // –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ —Å–ø—Ä–∞–≤
      const todosRes = await pool.query(
        'SELECT id, text FROM todos WHERE user_id = $1 ORDER BY created_at DESC',
        [dbUserId]
      );

      if (todosRes.rows.length === 0) {
        return ctx.reply('üì≠ –£ —Ç–µ–±–µ —â–µ –Ω–µ–º–∞—î —Å–ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è.', {
          reply_markup: todoKeyboard,
        });
      }

      const todoIndex = index - 1;

      if (todoIndex < 0 || todoIndex >= todosRes.rows.length) {
        return ctx.reply(`‚ùå –¢–∞–∫–æ–≥–æ –∑–∞–ø–∏—Å—É –Ω–µ —ñ—Å–Ω—É—î. –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ 1 –¥–æ ${todosRes.rows.length}`, {
          reply_markup: todoKeyboard,
        });
      }

      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID —Å–ø—Ä–∞–≤–∏ –≤ —Å–µ—Å—ñ—ó
      const todoId = todosRes.rows[todoIndex].id;

      ctx.session.todo = {
        state: 'edit_todo_title',
        todoId,
      };

      await ctx.reply('‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è —Å–ø—Ä–∞–≤–∏:', {
        reply_markup: { remove_keyboard: true },
      });

    } catch (e) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–±–æ—Ç—ñ –∑ –ë–î:', e);
      await ctx.reply('‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—ñ–¥–≥–æ—Ç–æ–≤—Ü—ñ –¥–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è.', {
        reply_markup: todoKeyboard,
      });
    }
  }
);

editTodoModule.on(':text').filter(
  (ctx): boolean => ctx.session.todo?.state === 'edit_todo_title',
  async (ctx) => {
    const newText = ctx.message?.text.trim();
    const userId = ctx.from?.id;

    if (!userId) {
      return ctx.reply('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤–∞—à Telegram ID.');
    }

    const todoId = ctx.session.todo?.todoId;

    if (!todoId) {
      return ctx.reply('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ ID —Å–ø—Ä–∞–≤–∏ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è.');
    }

    try {
      // –û—Ç—Ä–∏–º—É—î–º–æ user_id –∑ –ë–î
      const userRes = await pool.query(
        'SELECT id FROM users WHERE telegram_user_id = $1',
        [userId]
      );

      if (userRes.rows.length === 0) {
        return ctx.reply('‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É —Å–∏—Å—Ç–µ–º—ñ.');
      }

      const dbUserId = userRes.rows[0].id;

      // –û–Ω–æ–≤–ª—é—î–º–æ —Ç–µ–∫—Å—Ç —Å–ø—Ä–∞–≤–∏
      await pool.query(
        'UPDATE todos SET text = $1 WHERE id = $2 AND user_id = $3',
        [newText, todoId, dbUserId]
      );

      await ctx.reply(`‚úÖ –°–ø—Ä–∞–≤—É —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞:\n"${newText}"`, {
        reply_markup: todoKeyboard,
      });

      ctx.session.todo = {
        state: null,
      };

    } catch (e) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—ñ —Å–ø—Ä–∞–≤–∏:', e);
      await ctx.reply('‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Ç–µ–∫—Å—Ç—É —Å–ø—Ä–∞–≤–∏.');
    }
  }
);

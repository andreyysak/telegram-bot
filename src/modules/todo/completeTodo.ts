import { Composer } from "grammy";
import { BotContext } from "../../bot.js";
import { COMPLETE_TEXT, todoKeyboard } from "../../keyboard/todoKeyboard.js";
import { BACK_TO_MAIN_TEXT } from "../../keyboard/backToMenu.js";
import { mainMenuKeyboard } from "../../keyboard/mainMenu.js";
import pool from "../../db/client.js";

export const completeTodoModule = new Composer<BotContext>()

completeTodoModule.hears(COMPLETE_TEXT, async (ctx) => {
  await ctx.reply('üÜî –í–≤–µ–¥–∏ ID —Å–ø—Ä–∞–≤–∏:', {
    reply_markup: todoKeyboard
  })

  ctx.session.todo = {
    state: 'complete_todo'
  }
})

completeTodoModule.hears(BACK_TO_MAIN_TEXT, async (ctx) => {
  await ctx.reply('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é', {
    reply_markup: mainMenuKeyboard
  })

  ctx.session.todo = {
    state: null
  }
})

completeTodoModule.on(':text').filter(
  (ctx): boolean => ctx.session.todo?.state === 'complete_todo',
  async (ctx) => {
    const text = ctx.message?.text.trim();
    const userId = ctx.from?.id;

    if (!text) throw new Error('‚ùå –ù–µ –æ—Ç—Ä–∏–º–∞–Ω–æ –∂–æ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö.')

    if (!userId) {
      return ctx.reply('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤–∞—à Telegram ID.');
    }

    const index = parseInt(text, 10);

    if (isNaN(index)) {
      return ctx.reply('‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä —Å–ø—Ä–∞–≤–∏.', {
        reply_markup: todoKeyboard,
      });
    }

    try {
      // –û—Ç—Ä–∏–º—É—î–º–æ user_id –∑ –ë–î
      const userRes = await pool.query(
        'SELECT id FROM users WHERE telegram_user_id = $1',
        [userId]
      );

      if (userRes.rows.length === 0) {
        return ctx.reply('‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É —Å–∏—Å—Ç–µ–º—ñ.');
      }

      const dbUserId = userRes.rows[0].id;

      // –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ —Å–ø—Ä–∞–≤ (–≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏–π —è–∫ —É —Ç–µ–±–µ –≤ —á–∞—Ç—ñ)
      const todosRes = await pool.query(
        'SELECT id, text FROM todos WHERE user_id = $1 ORDER BY created_at DESC',
        [dbUserId]
      );

      if (todosRes.rows.length === 0) {
        return ctx.reply('üì≠ –£ —Ç–µ–±–µ —â–µ –Ω–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤ —É —Å–ø–∏—Å–∫—É To-Do.', {
          reply_markup: todoKeyboard,
        });
      }

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î —Ç–∞–∫–∏–π —ñ–Ω–¥–µ–∫—Å
      const todoIndex = index - 1;

      if (todoIndex < 0 || todoIndex >= todosRes.rows.length) {
        return ctx.reply(`‚ùå –°–ø—Ä–∞–≤–∏ –∑ —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ–º–∞—î. –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ 1 –¥–æ ${todosRes.rows.length}`, {
          reply_markup: todoKeyboard,
        });
      }

      const todoId = todosRes.rows[todoIndex].id;
      const todoText = todosRes.rows[todoIndex].text;

      // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å —É –ë–î
      await pool.query(
        'UPDATE todos SET done = TRUE WHERE id = $1 AND user_id = $2',
        [todoId, dbUserId]
      );

      await ctx.reply(`‚úÖ –°–ø—Ä–∞–≤—É "${todoText}" –≤—ñ–¥–∑–Ω–∞—á–µ–Ω–æ –≤–∏–∫–æ–Ω–∞–Ω–æ—é.`, {
        reply_markup: todoKeyboard,
      });

      ctx.session.todo = {
        state: null,
      };

    } catch (e) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–∑–Ω–∞—á–µ–Ω–Ω—ñ –≤–∏–∫–æ–Ω–∞–Ω–æ—ó —Å–ø—Ä–∞–≤–∏:', e);
      await ctx.reply('‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—É.');
    }
  }
);
import { Composer } from "grammy";
import { BotContext } from "../../bot.js";
import { LIST_TEXT, todoKeyboard } from "../../keyboard/todoKeyboard.js";
import pool from "../../db/client.js";

export const listTodoModule = new Composer<BotContext>()

listTodoModule.hears(LIST_TEXT, async (ctx) => {
  const userId = ctx.from?.id

  if (!userId) {
    return ctx.reply('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.');
  }

   try {
    // –û—Ç—Ä–∏–º—É—î–º–æ user_id –∑ —Ç–∞–±–ª–∏—Ü—ñ users
    const userRes = await pool.query(
      'SELECT id FROM users WHERE telegram_user_id = $1',
      [userId]
    );

    if (userRes.rows.length === 0) {
      return ctx.reply('‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É —Å–∏—Å—Ç–µ–º—ñ.');
    }

    const dbUserId = userRes.rows[0].id;

    // –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ —Å–ø—Ä–∞–≤–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const todosRes = await pool.query(
      'SELECT id, text, done, created_at FROM todos WHERE user_id = $1 ORDER BY created_at DESC',
      [dbUserId]
    );

    if (todosRes.rows.length === 0) {
      return ctx.reply('üì≠ –£ —Ç–µ–±–µ —â–µ –Ω–µ–º–∞—î —Å–ø—Ä–∞–≤.', {
        reply_markup: todoKeyboard,
      });
    }

    // –§–æ—Ä–º–∞—Ç—É—î–º–æ —Å–ø–∏—Å–æ–∫
    const listText = todosRes.rows.map((row, index) => {
      const statusEmoji = row.done ? 'üü¢' : 'üî¥';
      return `${statusEmoji} *${index + 1}. ${row.text}*`;
    }).join('\n');

    await ctx.reply(`üìã –¢–≤—ñ–π —Å–ø–∏—Å–æ–∫ —Å–ø—Ä–∞–≤:\n\n${listText}`, {
      parse_mode: 'Markdown',
      reply_markup: todoKeyboard,
    });

  } catch (e) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å–ø–∏—Å–∫—É:', e);
    await ctx.reply('‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å–ø–∏—Å–∫—É.', {
      reply_markup: todoKeyboard,
    });
  }
})
import { Composer } from 'grammy';
import pool from '../../db/client.js';
import { BotContext } from '../../bot.js';
import { carMenuKeyboard } from '../../keyboard/carMenu.js';

export const maintenanceHistoryModule = new Composer<BotContext>();

maintenanceHistoryModule.callbackQuery('history_maintenance', async (ctx) => {
  const telegramUserId = ctx.from?.id;

  if (!telegramUserId) {
    return ctx.reply('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.', {
      reply_markup: carMenuKeyboard,
    });
  }

  try {
    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ user_id –∑ —Ç–∞–±–ª–∏—Ü—ñ users
    const userRes = await pool.query(
      'SELECT id FROM users WHERE telegram_user_id = $1',
      [telegramUserId]
    );

    if (userRes.rows.length === 0) {
      return ctx.reply('‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É —Å–∏—Å—Ç–µ–º—ñ.');
    }

    const dbUserId = userRes.rows[0].id;

    // –û—Ç—Ä–∏–º—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é –¢–û
    const maintenanceRes = await pool.query(
      'SELECT work_type, kilometers, cost, created_at FROM maintenance WHERE user_id = $1 ORDER BY created_at DESC LIMIT 10',
      [dbUserId]
    );

    if (maintenanceRes.rows.length === 0) {
      return ctx.reply('üì≠ –£ —Ç–µ–±–µ —â–µ –Ω–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤ –ø—Ä–æ —Ç–µ—Ö–Ω—ñ—á–Ω–µ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è.', {
        reply_markup: carMenuKeyboard,
      });
    }

    const historyText = maintenanceRes.rows.map((row, index) => {
      const date = new Date(row.created_at);
      const time = date.toLocaleTimeString('uk-UA', { hour: '2-digit', minute: '2-digit' }); // 17:52
      const fullDate = date.toLocaleDateString('uk-UA'); // 14.05.2025

      return `
üìù –ó–∞–ø–∏—Å ${index + 1}:
üìå –ó–∞–º—ñ–Ω–∞: 
- ${row.work_type}

üî¢ –ö—ñ–ª–æ–º–µ—Ç—Ä–∞–∂: ${row.kilometers} –∫–º
üí∞ –°—É–º–∞: ${row.cost} –≥—Ä–Ω
üìÖ –î–∞—Ç–∞: ${fullDate}
`;
    }).join('\n\n');

    await ctx.reply(`üìÑ –Ü—Å—Ç–æ—Ä—ñ—è —Ç–µ—Ö–Ω—ñ—á–Ω–æ–≥–æ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è:\n\n${historyText}`, {
      reply_markup: carMenuKeyboard,
    });

    await ctx.answerCallbackQuery()

  } catch (e) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ—Å—Ç–æ—Ä—ñ—ó:', e);
    await ctx.reply('‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —ñ—Å—Ç–æ—Ä—ñ—ó.');
    await ctx.answerCallbackQuery();
  }
});
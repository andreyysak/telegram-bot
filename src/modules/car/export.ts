// src/modules/car/exportModule.ts
import { Composer } from "grammy";
import { BotContext } from "../../bot.js";
import pool from "../../db/client.js";
import { CAR_MENU, carMenuKeyboard } from "../../keyboard/carMenu.js";
import { exportToCsv } from "../../services/exportToCsv.js";
import fs from 'fs';
import { promisify } from 'util';
import { InputFile } from 'grammy';
import { exportCarKeyboard } from "../../keyboard/exportCarKeyboard.js";

const unlinkAsync = promisify(fs.unlink);

export const exportModule = new Composer<BotContext>();

exportModule.hears(CAR_MENU.DOWNLOAD, async (ctx) => {
  await ctx.reply('–û–±–µ—Ä–∏, —â–æ —Ç–∏ —Ö–æ—á–µ—à –µ–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏: ', {
    reply_markup: exportCarKeyboard
  })
})

exportModule.callbackQuery(/^export_(trip|gas|wash|maintenance)$/, async (ctx) => {
  const [, type] = ctx.match;

  const telegramUserId = ctx.from?.id;

  if (!telegramUserId) {
    return ctx.reply('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.');
  }

  try {
    // –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –ë–î
    const userRes = await pool.query(
      'SELECT id FROM users WHERE telegram_user_id = $1',
      [telegramUserId]
    );

    if (userRes.rows.length === 0) {
      return ctx.reply('‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É —Å–∏—Å—Ç–µ–º—ñ.');
    }

    const dbUserId = userRes.rows[0].id;
    let data;

    switch (type) {
      case 'trip':
        data = await pool.query('SELECT kilometers, direction, created_at FROM trips WHERE user_id = $1 ORDER BY created_at DESC', [dbUserId]);
        break;

      case 'gas':
        data = await pool.query('SELECT liters, total_price AS price, station, created_at FROM gas_refuels WHERE user_id = $1 ORDER BY created_at DESC', [dbUserId]);
        break;

      case 'wash':
        data = await pool.query('SELECT price, created_at FROM car_washes WHERE user_id = $1 ORDER BY created_at DESC', [dbUserId]);
        break;

      case 'maintenance':
        data = await pool.query('SELECT description, cost, created_at FROM maintenances WHERE user_id = $1 ORDER BY created_at DESC', [dbUserId]);
        break;

      default:
        return ctx.reply('‚ùå –ù–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏–π —Ç–∏–ø –¥–∞–Ω–∏—Ö –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É');
    }

    if (data.rows.length === 0) {
      return ctx.reply(`üì≠ –£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É ${type}`, {
        reply_markup: carMenuKeyboard,
      });
    }

    // –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –≤ CSV
    const filePath = await exportToCsv(type, data.rows);

    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ñ–∞–π–ª —á–µ—Ä–µ–∑ InputFile
    await ctx.replyWithDocument(
      new InputFile(fs.createReadStream(filePath), `${type}_export.csv`), // ‚úÖ –¢–∞–∫ –ø—Ä–∞—Ü—é—î!
      {
        caption: `üìÑ –§–∞–π–ª –µ–∫—Å–ø–æ—Ä—Ç—É –¥–ª—è "${type}"`,
      }
    );

    // –í–∏–¥–∞–ª—è—î–º–æ —Ñ–∞–π–ª –ø—ñ—Å–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
    await unlinkAsync(filePath);

    await ctx.answerCallbackQuery();

  } catch (e) {
    console.error(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –µ–∫—Å–ø–æ—Ä—Ç—ñ ${type}:`, e);
    await ctx.reply('‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –µ–∫—Å–ø–æ—Ä—Ç—ñ –¥–∞–Ω–∏—Ö.');
    await ctx.answerCallbackQuery();
  }
});
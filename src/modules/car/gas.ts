import { Composer } from "grammy";
import { BotContext } from "../../bot.js";
import { gasStationsKeyboard } from "../../keyboard/gasStations.js";
import { CAR_MENU, carMenuKeyboard } from "../../keyboard/carMenu.js";
import pool from "../../db/client.js";

export const gasModule = new Composer<BotContext>()

gasModule.hears(CAR_MENU.FUEL, async (ctx) => {
  await ctx.reply('–í–≤–µ–¥–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ª—ñ—Ç—Ä—ñ–≤:', {
    reply_markup: { remove_keyboard: true }
  })

  ctx.session.gas = {
    state: 'awaiting_liters'
  }
})

gasModule.on(':text').filter(
  (ctx): boolean => ctx.session.gas?.state === 'awaiting_liters',
  async (ctx) => {
    const text = ctx.message?.text.trim()

    if (!text) throw new Error('‚ùå –ù–µ –æ—Ç—Ä–∏–º–∞–Ω–æ –∂–æ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö.')

    const liters = parseFloat(text.replace(',', '.'))

    if (isNaN(liters)) {
      return ctx.reply('‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–µ —á–∏—Å–ª–æ.')
    }

    ctx.session.gas = {
      ...ctx.session.gas,
      liters,
      state: 'awaiting_total_price'
    }

    await ctx.reply('üí∏ –í–≤–µ–¥–∏ –≤–∏—Ç—Ä–∞—á–µ–Ω—É —Å—É–º—É:')
  }
)

gasModule.on(':text').filter(
  (ctx): boolean => ctx.session.gas?.state === 'awaiting_total_price',
  async (ctx) => {
    const text = ctx.message?.text.trim()

    if (!text) throw new Error('‚ùå –ù–µ –æ—Ç—Ä–∏–º–∞–Ω–æ –∂–æ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö.')

    const totalPrice = parseFloat(text.replace(',', '.'))

    if (isNaN(totalPrice)) {
      return ctx.reply('‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–µ —á–∏—Å–ª–æ.')
    }

    ctx.session.gas = {
      ...ctx.session.gas,
      totalPrice,
      state: 'awaiting_gas_stattion'
    }

    await ctx.reply('üè™ –û–±–µ—Ä–∏ –ê–ó–°:', {
      reply_markup: gasStationsKeyboard
    })
  }
)

gasModule.callbackQuery(/gas_/, async (ctx) => {
  const station = ctx.callbackQuery.data.replace('gas_', '');

  const userId = ctx.from.id;
  const gasData = ctx.session.gas;

  if (!gasData || !gasData.liters || !gasData.totalPrice) {
    return ctx.reply('‚ö†Ô∏è –ù–µ –≤–∏—Å—Ç–∞—á–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è');
  }

  try {
    // –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –ë–î
    const userRes = await pool.query(
      'SELECT id FROM users WHERE telegram_user_id = $1',
      [userId]
    );

    if (userRes.rows.length === 0) {
      return ctx.reply('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.');
    }

    const dbUserId = userRes.rows[0].id;
    const { liters, totalPrice } = gasData;

    await pool.query(
      'INSERT INTO gas_refuels (user_id, liters, total_price, station) VALUES ($1, $2, $3, $4)',
      [dbUserId, liters, totalPrice, station]
    );

    await ctx.reply(`‚úÖ –ó–∞–ø—Ä–∞–≤–ª–µ–Ω–æ ${liters} –ª –Ω–∞ ${totalPrice} –≥—Ä–Ω\n–ê–ó–°: ${station}`, {
      reply_markup: carMenuKeyboard,
    });

    ctx.session.gas = undefined;

  } catch (e) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∑–∞–ø—Ä–∞–≤–∫–∏:', e);
    await ctx.reply('‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ.');
  }
});
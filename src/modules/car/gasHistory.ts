// src/modules/car/gasHistoryModule.ts
import { Composer } from 'grammy';
import pool from '../../db/client.js';
import { BotContext } from '../../bot.js';
import { carMenuKeyboard } from '../../keyboard/carMenu.js';

export const gasHistoryModule = new Composer<BotContext>();

gasHistoryModule.callbackQuery('history_gas', async (ctx) => {
  const telegramUserId = ctx.from?.id;

  if (!telegramUserId) {
    return ctx.reply('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.', {
      reply_markup: carMenuKeyboard,
    });
  }

  try {
    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ user_id –∑ —Ç–∞–±–ª–∏—Ü—ñ users
    const userRes = await pool.query(
      'SELECT id FROM users WHERE telegram_user_id = $1',
      [telegramUserId]
    );

    if (userRes.rows.length === 0) {
      return ctx.reply('‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É —Å–∏—Å—Ç–µ–º—ñ.');
    }

    const dbUserId = userRes.rows[0].id;

    // –û—Ç—Ä–∏–º—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ 10 –∑–∞–ø—Ä–∞–≤–æ–∫
    const gasRes = await pool.query(
      'SELECT liters, total_price, station, created_at FROM gas_refuels WHERE user_id = $1 ORDER BY created_at DESC LIMIT 10',
      [dbUserId]
    );

    if (gasRes.rows.length === 0) {
      return ctx.reply('üì≠ –£ —Ç–µ–±–µ —â–µ –Ω–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤ –ø—Ä–æ –∑–∞–ø—Ä–∞–≤–∫—É –∞–≤—Ç–æ–º–æ–±—ñ–ª—è.', {
        reply_markup: carMenuKeyboard,
      });
    }

    // –§–æ—Ä–º–∞—Ç—É—î–º–æ —Ç–µ–∫—Å—Ç —ñ—Å—Ç–æ—Ä—ñ—ó
    const historyText = gasRes.rows.map((row, index) => {
      const date = new Date(row.created_at);
      const time = date.toLocaleTimeString('uk-UA', { hour: '2-digit', minute: '2-digit' }); // 17:52
      const fullDate = date.toLocaleDateString('uk-UA'); // 14.05.2025

      return `${index + 1}. ${row.station} | ${row.liters} –ª | ${row.total_price} –≥—Ä–Ω | ${time} | ${fullDate}`;
    }).join('\n');

    await ctx.reply(`üìÑ –Ü—Å—Ç–æ—Ä—ñ—è –∑–∞–ø—Ä–∞–≤–æ–∫:\n\n${historyText}`, {
      reply_markup: carMenuKeyboard,
    });

    await ctx.answerCallbackQuery(); // –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –≥–æ–¥–∏–Ω–Ω–∏–∫ "–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è" –ø—ñ—Å–ª—è –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è

  } catch (e) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ—Å—Ç–æ—Ä—ñ—ó –∑–∞–ø—Ä–∞–≤–æ–∫:', e);
    await ctx.reply('‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —ñ—Å—Ç–æ—Ä—ñ—ó.');
    await ctx.answerCallbackQuery();
  }
});
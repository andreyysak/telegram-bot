import { Composer } from 'grammy';
import pool from '../../db/client.js';
import { CAR_MENU, carMenuKeyboard } from '../../keyboard/carMenu.js';
import { BotContext } from '../../bot.js';

export const tripModule = new Composer<BotContext>();

tripModule.hears(CAR_MENU.TRIP, async (ctx) => {
  await ctx.reply('–í–≤–µ–¥–∏ –∫—ñ–ª–æ–º–µ—Ç—Ä–∞–∂:', {
    reply_markup: carMenuKeyboard,
  });

  // ‚úÖ –î–æ–¥–∞—î–º–æ –∞–±–æ —Å–∫–∏–¥–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—é —Å–µ—Å—ñ—é trip
  ctx.session.trip = {
    state: 'awaiting_kilometers',
  };
});

tripModule.on(':text').filter(
  (ctx): boolean => ctx.session.trip?.state === 'awaiting_kilometers',
  async (ctx) => {
    const text = ctx.message?.text.trim();

    if (!text) throw new Error('‚ùå –ù–µ –æ—Ç—Ä–∏–º–∞–Ω–æ –∂–æ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö.')

    const km = parseFloat(text.replace(',', '.'));

    if (isNaN(km)) {
      return ctx.reply('‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–µ —á–∏—Å–ª–æ.', {
        reply_markup: carMenuKeyboard,
      });
    }

    // ‚úÖ –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫—ñ–ª–æ–º–µ—Ç—Ä–∏ –≤ –∑–∞–≥–∞–ª—å–Ω–æ–º—É —Ç–∏–ø—ñ SessionData
    ctx.session.trip = {
      ...ctx.session.trip,
      km,
      state: 'awaiting_direction',
    };

    await ctx.reply('–í–µ–µ–¥–∏ –Ω–∞–ø—Ä—è–º–æ–∫ –ø–æ—ó–∑–¥–∫–∏:', {
      reply_markup: carMenuKeyboard,
    });
  }
);

tripModule.on(':text').filter(
  (ctx): boolean => ctx.session.trip?.state === 'awaiting_direction',
  async (ctx) => {
    const text = ctx.message?.text.trim();

    const userId = ctx.from?.id;

    try {
      const userRes = await pool.query(
        'SELECT id FROM users WHERE telegram_user_id = $1',
        [userId]
      );
      if (userRes.rows.length === 0) {
        return ctx.reply('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É —Å–∏—Å—Ç–µ–º—ñ.');
      }

      const dbUserId = userRes.rows[0].id;
      const km = ctx.session.trip?.km;
      const direction = text;

      if (!km) {
        return ctx.reply('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫—ñ–ª–æ–º–µ—Ç—Ä–∏', {
          reply_markup: carMenuKeyboard,
        });
      }

      // ‚úÖ –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–æ –ë–î
      await pool.query(
        'INSERT INTO trips (user_id, kilometers, direction) VALUES ($1, $2, $3)',
        [dbUserId, km, direction]
      );

      await ctx.reply(`‚úÖ –ü–æ—ó–∑–¥–∫–∞: ${km} –∫–º\nüß≠ –ù–∞–ø—Ä—è–º–æ–∫: ${direction}`, {
        reply_markup: carMenuKeyboard,
      });

      // ‚úÖ –ß–∏—Å—Ç–∏–º–æ —Å—Ç–∞–Ω
      ctx.session.trip = undefined;

    } catch (e) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –ø–æ—ó–∑–¥–∫–∏:', e);
      await ctx.reply('‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ.', {
        reply_markup: carMenuKeyboard,
      });
    }
  }
);
import { Composer } from "grammy";
import { BotContext } from "../../bot.js";
import { CAR_MENU, carMenuKeyboard } from "../../keyboard/carMenu.js";
import pool from "../../db/client.js";

export const maintenanceModule = new Composer<BotContext>()

maintenanceModule.hears(CAR_MENU.SERVICE, async (ctx) => {
  await ctx.reply('üîß –í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å —Ä–æ–±–æ—Ç–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: "–ó–∞–º—ñ–Ω–∞ –º–∞—Å–ª—è–Ω–æ–≥–æ —Ñ—ñ–ª—å—Ç—Ä–∞"):', {
    reply_markup: { remove_keyboard: true },
  });

  ctx.session.maintenance = {
    state: 'awaiting_work_type',
  };
})

// === 1. –û—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–ø–∏—Å—É —Ä–æ–±–æ—Ç–∏ ===
maintenanceModule.on(':text').filter(
  (ctx): boolean => ctx.session.maintenance?.state === 'awaiting_work_type',
  async (ctx) => {
    const text = ctx.message?.text.trim();

    if (!text) {
      return ctx.reply('‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å —Ä–æ–±–æ—Ç–∏.');
    }

    ctx.session.maintenance = {
      ...ctx.session.maintenance,
      workType: text,
      state: 'awaiting_kilometers',
    };

    await ctx.reply('üõû –í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª–æ–º–µ—Ç—Ä–∞–∂ –Ω–∞ –º–æ–º–µ–Ω—Ç –¢–û:');
  }
);

// === 2. –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—ñ–ª–æ–º–µ—Ç—Ä—ñ–≤ ===
maintenanceModule.on(':text').filter(
  (ctx): boolean => ctx.session.maintenance?.state === 'awaiting_kilometers',
  async (ctx) => {
    const text = ctx.message?.text.trim();
    const workType = ctx.session.maintenance?.workType;

    if (!text) {
      return ctx.reply('‚ùå –í–≤–µ–¥–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ –¥–∞–Ω—ñ.');
    }

    if (!workType) {
      return ctx.reply('‚ö†Ô∏è –°–ø–æ—á–∞—Ç–∫—É –≤–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å —Ä–æ–±–æ—Ç–∏.');
    }

    const km = parseFloat(text.replace(',', '.'));

    if (isNaN(km)) {
      return ctx.reply('‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–µ —á–∏—Å–ª–æ.');
    }

    ctx.session.maintenance = {
      ...ctx.session.maintenance,
      km,
      state: 'awaiting_cost',
    };

    await ctx.reply('üí∞ –í–≤–µ–¥—ñ—Ç—å —Å—É–º—É, –∑–∞ —è–∫—É –±—É–ª–æ –≤–∏–∫–æ–Ω–∞–Ω–æ –¢–û:');
  }
);

// === 3. –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—É–º–∏ ===
maintenanceModule.on(':text').filter(
  (ctx): boolean => ctx.session.maintenance?.state === 'awaiting_cost',
  async (ctx) => {
    const text = ctx.message?.text.trim();
    const userId = ctx.from?.id;
    const workType = ctx.session.maintenance?.workType;
    const km = ctx.session.maintenance?.km;

    if (!text) {
      return ctx.reply('‚ùå –í–≤–µ–¥–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ –¥–∞–Ω—ñ.');
    }

    if (!workType || !km) {
      return ctx.reply('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –¥–∞–Ω—ñ.');
    }

    const cost = parseFloat(text.replace(',', '.'));

    if (isNaN(cost)) {
      return ctx.reply('‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É —Å—É–º—É.');
    }

    try {
      // –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –ë–î
      const userRes = await pool.query(
        'SELECT id FROM users WHERE telegram_user_id = $1',
        [userId]
      );

      if (userRes.rows.length === 0) {
        return ctx.reply('‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É —Å–∏—Å—Ç–µ–º—ñ.');
      }

      const dbUserId = userRes.rows[0].id;

      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –ë–î
      await pool.query(
        'INSERT INTO maintenance (user_id, work_type, kilometers, cost) VALUES ($1, $2, $3, $4)',
        [dbUserId, workType, km, cost]
      );

      await ctx.reply(`‚úÖ –†–æ–±–æ—Ç—É "${workType}" –Ω–∞ —Å—É–º—É ${cost} –≥—Ä–Ω\n–Ω–∞ –∫—ñ–ª–æ–º–µ—Ç—Ä–∞–∂—ñ ${km} –∫–º —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ.`, {
        reply_markup: carMenuKeyboard,
      });

      ctx.session.maintenance = undefined; // –æ—á–∏—â—É—î–º–æ —Å—Ç–∞–Ω

    } catch (e) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –¢–û:', e);
      await ctx.reply('‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö.');
    }
  }
);
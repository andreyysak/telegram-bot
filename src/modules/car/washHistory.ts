import { Composer } from 'grammy';
import pool from '../../db/client.js';
import { BotContext } from '../../bot.js';
import { carMenuKeyboard } from '../../keyboard/carMenu.js';

export const washHistoryModule = new Composer<BotContext>();

washHistoryModule.callbackQuery('history_wash', async (ctx) => {
  const telegramUserId = ctx.from?.id;

  if (!telegramUserId) {
    return ctx.reply('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤–∞—à Telegram ID.', {
      reply_markup: carMenuKeyboard,
    });
  }

  try {
    // –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–∞–±–ª–∏—Ü—ñ users
    const userRes = await pool.query(
      'SELECT id FROM users WHERE telegram_user_id = $1',
      [telegramUserId]
    );

    if (userRes.rows.length === 0) {
      return ctx.reply('‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É —Å–∏—Å—Ç–µ–º—ñ.');
    }

    const dbUserId = userRes.rows[0].id;

    // –û—Ç—Ä–∏–º—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ –∑–∞–ø–∏—Å–∏ –ø—Ä–æ –º–∏–π–∫–∏
    const res = await pool.query(
      'SELECT price, created_at FROM car_washes WHERE user_id = $1 ORDER BY created_at DESC LIMIT 10',
      [dbUserId]
    );

    if (res.rows.length === 0) {
      return ctx.reply('üì≠ –£ —Ç–µ–±–µ —â–µ –Ω–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤ –ø—Ä–æ –º–∏–π–∫–∏.', {
        reply_markup: carMenuKeyboard,
      });
    }

    // –§–æ—Ä–º–∞—Ç—É—î–º–æ –∫–æ–∂–µ–Ω –∑–∞–ø–∏—Å
    const historyText = res.rows.map((row, index) => {
      const date = new Date(row.created_at);
      const fullDate = date.toLocaleDateString('uk-UA'); // 14.05.2025
      const time = date.toLocaleTimeString('uk-UA', { hour: '2-digit', minute: '2-digit' }); // 17:52

      return `${index + 1}. üí∞ ${row.price} –≥—Ä–Ω | ${time} | ${fullDate}`;
    }).join('\n');

    // –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —ñ—Å—Ç–æ—Ä—ñ—î—é
    await ctx.reply(`üöø –Ü—Å—Ç–æ—Ä—ñ—è –º–∏–π–∫–∏ –∞–≤—Ç–æ:\n\n${historyText}`, {
      reply_markup: carMenuKeyboard,
    });

    await ctx.answerCallbackQuery(); // –ü—Ä–∏–±–∏—Ä–∞—î–º–æ "–≥–æ–¥–∏–Ω–Ω–∏–∫ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è"

  } catch (e) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —ñ—Å—Ç–æ—Ä—ñ—ó:', e);
    await ctx.reply('‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ—Å—Ç–æ—Ä—ñ—ó –º–∏–π–æ–∫.');

    await ctx.answerCallbackQuery();
  }
});
import { Composer } from 'grammy';
import pool from '../../db/client.js';
import { BotContext } from '../../bot.js';
import { CAR_MENU, carMenuKeyboard } from '../../keyboard/carMenu.js';

export const washModule = new Composer<BotContext>();

// === –ö–Ω–æ–ø–∫–∞ "üßº –ú–∏–π–∫–∞" ===
washModule.hears(CAR_MENU.WASH, async (ctx) => {
  ctx.session.wash = {
    state: 'awaiting_price',
  };

  await ctx.reply('üí≤ –í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –∑–∞ –º–∏–π–∫—É:', {
    reply_markup: { remove_keyboard: true },
  });
});

// === –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç—É (—Å—É–º–∞ –º–∏–π–∫–∏) ===
washModule.on(':text').filter(
  (ctx): boolean => ctx.session.wash?.state === 'awaiting_price',
  async (ctx) => {
    const text = ctx.message?.text.trim();
    const userId = ctx.from?.id;

    if (!text) {
      return ctx.reply('‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Å—É–º—É.');
    }

    const price = parseFloat(text.replace(',', '.'));

    if (isNaN(price)) {
      return ctx.reply('‚ùå –°—É–º–∞ –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º.');
    }

    try {
      // –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–∞–±–ª–∏—Ü—ñ users
      const userRes = await pool.query(
        'SELECT id FROM users WHERE telegram_user_id = $1',
        [userId]
      );

      if (userRes.rows.length === 0) {
        return ctx.reply('‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É —Å–∏—Å—Ç–µ–º—ñ.', {
          reply_markup: carMenuKeyboard,
        });
      }

      const dbUserId = userRes.rows[0].id;

      await pool.query(
        'INSERT INTO expense_tracker (user_id, type, category, amount) VALUES ($1, $2, $3, $4)',
        [dbUserId, 'expense', 'avto', price]
      );

      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –º–∏–π–∫—É
      await pool.query(
        'INSERT INTO car_washes (user_id, price) VALUES ($1, $2)',
        [dbUserId, price]
      );

      // –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—à–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
      const now = new Date().toLocaleDateString('uk-UA');
      await ctx.reply(`‚úÖ –î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ:\n\nüí∞ –°—É–º–∞: ${price} –≥—Ä–Ω\nüìÖ –î–∞—Ç–∞: ${now}`, {
        reply_markup: carMenuKeyboard,
      });

      // –ß–∏—Å—Ç–∏–º–æ —Å—Ç–∞–Ω
      ctx.session.wash?.state === null

    } catch (e) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –º–∏–π–∫–∏:', e);
      await ctx.reply('‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ.');
    }
  }
);

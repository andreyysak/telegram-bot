import { Composer } from 'grammy';
import pool from '../../db/client.js';
import { BotContext } from '../../bot.js';
import { carMenuKeyboard } from '../../keyboard/carMenu.js';

export const tripHistoryModule = new Composer<BotContext>();

tripHistoryModule.hears('üìú –Ü—Å—Ç–æ—Ä—ñ—è –ø–æ—ó–∑–¥–æ–∫', async (ctx) => {
  const telegramUserId = ctx.from?.id;

  if (!telegramUserId) {
    return ctx.reply('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞');
  }

  try {
    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ `user_id` –∑ —Ç–∞–±–ª–∏—Ü—ñ `users` –∑–∞ `telegram_user_id`
    const userRes = await pool.query(
      'SELECT id FROM users WHERE telegram_user_id = $1',
      [telegramUserId]
    );

    if (userRes.rows.length === 0) {
      return ctx.reply('‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É —Å–∏—Å—Ç–µ–º—ñ.');
    }

    const dbUserId = userRes.rows[0].id;

    // –®—É–∫–∞—î–º–æ –≤—Å—ñ –ø–æ—ó–∑–¥–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const tripsRes = await pool.query(
      'SELECT kilometers, direction, created_at FROM trips WHERE user_id = $1 ORDER BY created_at DESC LIMIT 10',
      [dbUserId]
    );

    if (tripsRes.rows.length === 0) {
      return ctx.reply('üì≠ –£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤ –ø—Ä–æ –ø–æ—ó–∑–¥–∫–∏.', {
        reply_markup: { remove_keyboard: true },
      });
    }

    // –§–æ—Ä–º–∞—Ç—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é
    const historyText = tripsRes.rows.map((row, index) => {
      const date = new Date(row.created_at);
      const time = date.toLocaleTimeString('uk-UA', { hour: '2-digit', minute: '2-digit' }); // 17:52
      const fullDate = date.toLocaleDateString('uk-UA'); // 14.05.2025

      const direction = row.direction || '–ù–∞–ø—Ä—è–º–æ–∫ –Ω–µ–≤—ñ–¥–æ–º–∏–π';

      return `${index + 1}. ${direction} | ${row.kilometers} –∫–º | ${time} | ${fullDate}`;
    }).join('\n');

    await ctx.reply(`üìÑ –û—Å—Ç–∞–Ω–Ω—ñ –ø–æ—ó–∑–¥–∫–∏:\n\n${historyText}`, {
      reply_markup: carMenuKeyboard,
    });

  } catch (e) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ—Å—Ç–æ—Ä—ñ—ó:', e);
    await ctx.reply('‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ—Å—Ç–æ—Ä—ñ—ó.');
  }
});
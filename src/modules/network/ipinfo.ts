// src/modules/network/ipinfo.ts
import { Composer } from 'grammy';
import { BotContext } from '../../bot.js';
import { IPINFO_MENU_TEXT, networkMenuKeyboard } from '../../keyboard/networkMenu.js';
import { getIpData } from '../../services/ipinfo.js';

export const ipInfoModule = new Composer<BotContext>();

// === –ö–Ω–æ–ø–∫–∞ –º–µ–Ω—é ===
ipInfoModule.hears(IPINFO_MENU_TEXT, async (ctx) => {
  ctx.session.ipinfo = {
    state: 'awaiting_ip',
  };

  await ctx.reply('üìç –í–≤–µ–¥—ñ—Ç—å IP-–∞–¥—Ä–µ—Å—É:');
});

// === –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç—É –¢–Ü–õ–¨–ö–ò —è–∫—â–æ —Å—Ç–∞–Ω awaiting_ip ===
ipInfoModule.on(':text').filter(
  (ctx): boolean => ctx.session.ipinfo?.state === 'awaiting_ip',
  async (ctx) => {
    const text = ctx.message?.text.trim();

    if (!text) throw new Error('‚ùå –ù–µ –æ—Ç—Ä–∏–º–∞–Ω–æ –∂–æ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö.')

    try {
      const data = await getIpData(text);

      const message = data
        .map(item => `${item.label} ${item.value}`)
        .join('\n');

      await ctx.reply(message, {
        reply_markup: networkMenuKeyboard,
      });

      // –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω
      ctx.session.ipinfo = {
        state: null,
      };

    } catch (e) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö –ø—Ä–æ IP:', e);
      await ctx.reply('‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–æ IP.', {
        reply_markup: networkMenuKeyboard,
      });
    }
  }
);
import { Composer } from "grammy";
import { BotContext } from "../../bot.js";
import { networkMenuKeyboard, PING_MENU_TEXT } from "../../keyboard/networkMenu.js";
import { exec } from "child_process";
import { promisify } from "util";

const execAsync = promisify(exec)

export const pingModule = new Composer<BotContext>()

pingModule.hears(PING_MENU_TEXT, async (ctx) => {
  ctx.session.ping = {
    state: 'ping_session'
  }

  await ctx.reply('üìç –í–≤–µ–¥—ñ—Ç—å IP-–∞–¥—Ä–µ—Å—É / –¥–æ–º–µ–Ω —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è ping:')
})

pingModule.on(':text').filter(
  (ctx): boolean => ctx.session.ping?.state === 'ping_session',
  async (ctx) => {
    const text = ctx.message?.text

    if (!text) throw new Error('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ IP-–∞–¥—Ä–µ—Å—É.')

    await ctx.reply(`‚è≥ –í–∏–∫–æ–Ω—É—é ping –¥–æ ${text}...`)


    try {
      // –í–∏–∫–æ–Ω—É—î–º–æ ping –Ω–∞ 20 –ø–∞–∫–µ—Ç—ñ–≤
      const command = `ping -c 20 ${text}`;
      const { stdout } = await execAsync(command);

      // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
      await ctx.reply(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç ping –¥–æ ${text}:\n\n${stdout}`, {
        reply_markup: networkMenuKeyboard,
      });

      ctx.session.ping = {
        state: null,
      };

    } catch (e) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ ping:', e);
      await ctx.reply('‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ ping.', {
        reply_markup: { remove_keyboard: true },
      });
    }
  }
)
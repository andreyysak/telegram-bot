import { Composer } from "grammy";
import { BotContext } from "../../bot.js";
import { EXPENSE_TEXT, expenseTrackerMainMenu } from "../../keyboard/expenseTrackerMenu.js";
import pool from "../../db/client.js";
import { CATEGORY_UA_ICONS } from "../../assets/categoryUA.js";

export const expenseHistoryModule = new Composer<BotContext>()

expenseHistoryModule.hears(EXPENSE_TEXT.list, async (ctx) => {
  const userId = ctx.from?.id;

  if (!userId) {
    return ctx.reply('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.');
  }

  try {
    // –û—Ç—Ä–∏–º—É—î–º–æ user_id –∑ –ë–î
    const userRes = await pool.query(
      'SELECT id FROM users WHERE telegram_user_id = $1',
      [userId]
    );

    if (userRes.rows.length === 0) {
      return ctx.reply('‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É —Å–∏—Å—Ç–µ–º—ñ.');
    }

    const dbUserId = userRes.rows[0].id;

    // –§—ñ–ª—å—Ç—Ä—É—î–º–æ –ª–∏—à–µ –ø–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å
    const now = new Date();
    const currentMonth = now.getMonth() + 1; // PostgreSQL –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ 1
    const currentYear = now.getFullYear();

    const res = await pool.query(
      `
      SELECT id, type, category, amount, created_at 
      FROM expense_tracker 
      WHERE user_id = $1 AND EXTRACT(MONTH FROM created_at) = $2 AND EXTRACT(YEAR FROM created_at) = $3
      ORDER BY created_at DESC
      `,
      [dbUserId, currentMonth, currentYear]
    );

    if (res.rows.length === 0) {
      return ctx.reply('üì≠ –£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤.', {
        reply_markup: expenseTrackerMainMenu,
      });
    }

    // –ì—Ä—É–ø—É—î–º–æ –∑–∞–ø–∏—Å–∏
    const expenses = res.rows.filter((row) => row.type === 'expense');
    const incomes = res.rows.filter((row) => row.type === 'income');

    // –û–±—á–∏—Å–ª—é—î–º–æ –∑–∞–≥–∞–ª—å–Ω—ñ —Å—É–º–∏
    const totalExpense = expenses.reduce((sum, row) => sum + parseFloat(row.amount), 0);
    const totalIncome = incomes.reduce((sum, row) => sum + parseFloat(row.amount), 0);
    const balance = totalIncome - totalExpense;

    // –ü–µ—Ä–µ–∫–ª–∞–¥–∞—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é
    const formatRow = (row: any) => {
      const date = new Date(row.created_at).toLocaleDateString('uk-UA');
      const translation = CATEGORY_UA_ICONS[row.category as keyof typeof CATEGORY_UA_ICONS];
      const translatedCategory = translation ? `${translation.icon} ${translation.name}` : row.category;

      return `${date} | ${translatedCategory} ‚Äî ${parseFloat(row.amount)} –≥—Ä–Ω`;
    };

    const monthName = now.toLocaleString('uk-UA', { month: 'long' });

    // –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    const message = `
üìÑ *–í–∏—Ç—Ä–∞—Ç–∏ –∑–∞ ${monthName} ${currentYear}* 

üìâ *–í–∏—Ç—Ä–∞—Ç–∏*:
${expenses.map(formatRow).join('\n')}

üìà *–î–æ—Ö–æ–¥–∏*:
${incomes.map(formatRow).join('\n')}

üìå *–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –≤–∏—Ç—Ä–∞—Ç*: ${totalExpense.toFixed(2)} –≥—Ä–Ω  
üí∞ *–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –¥–æ—Ö–æ–¥—ñ–≤*: ${totalIncome.toFixed(2)} –≥—Ä–Ω  
‚úÖ *–ë–∞–ª–∞–Ω—Å*: ${balance.toFixed(2)} –≥—Ä–Ω
    `;

    await ctx.reply(message, {
      parse_mode: 'Markdown',
      reply_markup: expenseTrackerMainMenu,
    });
  } catch (e) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —ñ—Å—Ç–æ—Ä—ñ—ó:', e);
    await ctx.reply('‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —ñ—Å—Ç–æ—Ä—ñ—ó.', {
      reply_markup: expenseTrackerMainMenu,
    });
  }
});